[["index.html", "Análisis de Series de Tiempo 1 Propuesta de estructura de datos a trabajar en el curso 1.1 Dataset: 1.2 Summary: 1.3 Scatter plott de la serie de tiempo: 1.4 Fuente:", " Análisis de Series de Tiempo Grupo 8 2024-11-25 1 Propuesta de estructura de datos a trabajar en el curso La estructura de información a trabajar en el curso será la serie de tiempo correspondiente al índice S&amp;P 500, el cual es un indicador ponderado del valor de capitalización de las 500 compañías más importantes de Estados Unidos. Calculado por la evaluadora de riesgo Standard &amp; Poor’s, este índice captura el 80% del comportamiento de la capitalización bursátil en el mercado americano. En tanto su estructura posee mayor diversidad en el tipo de compañías que lo componen, se tiene que el índice S&amp;P 500 es una buena medida para monitorear y predecir la actividad económica en los enclaves económicos de mayor importancia a nivel global. En general, la pertinencia del uso de este dataset radica en 3 razones principales: En principio, se trata de una estructura de información concisa, legítima en el marco de las actividades de sectores financieros globales, y sin problemas previos en cuanto a la limpieza de sus observaciones. Por lo que una rutina progresiva de análisis sobre esta base de datos se puede dar con mayor facilidad e interpretabilidad. El estudio del comportamiento de la capitalización bursátil a nivel global, contenido en el dataset escogido, implica una vista previa y una posible profundización del análisis financiero en el marco de las series de tiempo sobre el comportamiento de firmas, sectores y economías de alto impacto. De esta manera, la aplicación de la rutina de análisis del curso sobre este dataset puede decantar en un ejercicio robusto que puede extenderse más allá de los propósitos básicos de aprendizaje, y conformar una herramienta útil para las intenciones del autor. El estudio de la estructura y comportamiento de este dataset como serie de tiempo, inmerso en las dinámicas de intercambio de los mercados de activos financieros, puede representar una herramienta de profundización para la toma de decisiones en materia de optimización de portafolios, y, en general, en materia de comprensión e implementación práctica de instrumentos aplicados de análisis de procesos estocásticos y metodologías de pronósticos. 1.1 Dataset: # Load necessary libraries library(rvest) library(dplyr) # Load necessary libraries library(readr) # Import the downloaded CSV file (change the path accordingly) spx_data &lt;- read_csv(&quot;C:/Users/anaso/OneDrive/Documentos/Desktop/AS1/HistoricalData_1731898394439.csv&quot;) # Display the first few rows of the dataset head(spx_data) ## # A tibble: 6 × 5 ## Date `Close/Last` Open High Low ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 11/15/2024 5871. 5913. 5915. 5853. ## 2 11/14/2024 5949. 5990. 5994. 5942. ## 3 11/13/2024 5985. 5986. 6008. 5966. ## 4 11/12/2024 5984. 6004. 6010. 5960. ## 5 11/11/2024 6001. 6009. 6017. 5987. ## 6 11/08/2024 5996. 5977. 6012. 5977. 1.2 Summary: summary(spx_data) ## Date Close/Last Open High Low ## Length:2528 Min. :1829 Min. : 0 Min. : 0 Min. : 0 ## Class :character 1st Qu.:2388 1st Qu.:2389 1st Qu.:2394 1st Qu.:2379 ## Mode :character Median :2972 Median :2969 Median :2984 Median :2955 ## Mean :3303 Mean :3294 Mean :3311 Mean :3275 ## 3rd Qu.:4171 3rd Qu.:4170 3rd Qu.:4194 3rd Qu.:4144 ## Max. :6001 Max. :6009 Max. :6017 Max. :5987 1.3 Scatter plott de la serie de tiempo: # Load necessary libraries library(ggplot2) library(dplyr) # Print the column names to check their exact names #print(colnames(spx_data)) # Convert the Date column to Date type spx_data &lt;- spx_data %&gt;% mutate(Date = as.Date(Date, format = &quot;%m/%d/%Y&quot;)) # Update the column name here after checking the output of print(colnames(spx_data)) spx_data &lt;- spx_data %&gt;% mutate(Close_price = as.numeric(gsub(&quot;[^0-9.]&quot;, &quot;&quot;, `Close/Last`))) # Update this line with the correct name # Remove rows with NA values in Date or Close_price spx_data &lt;- spx_data %&gt;% filter(!is.na(Date) &amp; !is.na(Close_price)) # Create the scatter plot ggplot(spx_data, aes(x = Date, y = Close_price)) + geom_point(color = &quot;blue&quot;, alpha = 0.6) + labs(title = &quot;S&amp;P 500 Close Prices Over Time&quot;, x = &quot;Date&quot;, y = &quot;Close Price&quot;) + theme_minimal() 1.4 Fuente: https://www.nasdaq.com/market-activity/index/spx/historical?page=1&amp;rows_per_page=10&amp;timeline=y10 ## # A tibble: 6 × 5 ## Date `Close/Last` Open High Low ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 11/15/2024 5871. 5913. 5915. 5853. ## 2 11/14/2024 5949. 5990. 5994. 5942. ## 3 11/13/2024 5985. 5986. 6008. 5966. ## 4 11/12/2024 5984. 6004. 6010. 5960. ## 5 11/11/2024 6001. 6009. 6017. 5987. ## 6 11/08/2024 5996. 5977. 6012. 5977. "],["análisis-gráfico-del-comportamiento-del-sp-500.html", " 2 Análisis gráfico del comportamiento del S&amp;P 500 2.1 Tratamiento previo del dataset 2.2 Serie de tiempo en bruto 2.3 Estacionariedad y tratamiento 2.4 Aproximación por MA 2.5 Aproximación por rezagos", " 2 Análisis gráfico del comportamiento del S&amp;P 500 2.1 Tratamiento previo del dataset Dada la base de datos escogida para las actividades del curso, se procede a realizar un análisis gráfico de los posibles patrones que pueda expresar esta serie de tiempo, particularmente, considerando los conceptos de aproximación a través de media móvil (MA), rezagos en la serie, y estacionariedad. Inicialmente, se procede con la consecusión del formato del dataset como serie de tiempo, empleando el paquete xts de R, el cual permite estructura el dataset en función de sus fechas, de tal forma que es posible tener en cuenta las brechas generadas por los fines de semana y holidays de esta serie de tiempo en días. #install.packages(&quot;xts&quot;) # Example if the Date is in &#39;MM/DD/YYYY&#39; format spx_data$Date &lt;- as.Date(spx_data$Date, format = &quot;%m/%d/%Y&quot;) library(xts) # Convert your data to an xts object # Assuming `spx_data` has a column &#39;Date&#39; in Date format and &#39;Close/Last&#39; for prices. spx_Close_ts &lt;- xts(spx_data$`Close/Last`, order.by = spx_data$Date) head(spx_Close_ts) ## [,1] ## 2014-11-17 2041.32 ## 2014-11-18 2051.80 ## 2014-11-19 2048.72 ## 2014-11-20 2052.75 ## 2014-11-21 2063.50 ## 2014-11-24 2069.41 2.2 Serie de tiempo en bruto Así, es posible extraer el gráfico preliminar del comportamiento de la serie de tiempo. Nótese que se consideran las fechas desde el 14 de octubre de 2014 hasta el 11 de octubre de 2024. plot(spx_Close_ts, main = &quot; &quot;, ylab=&quot;S&amp;P500 Index&quot;, col = &quot;deepskyblue&quot;, xlab= &quot;Date&quot;) title(main=&quot;S&amp;P500 Index (Starting at October 14th of 2014)&quot;) El gráfico permite denotar una tendencia bastante obvia en cuanto al contexto de la serie de tiempo, ésta es la variación en la actividad del índice en función de la pandemia de 2020, denotada por una fuerte caída del precio del índice alrededor del inicio de 2020. Así, el análisis previo a realizar en este documento considerará un segmento de la serie de tiempo comprendido desde el primero de enero de 2020. Además, el gráfico de rezagos presentada debajo permite observar el grado de correlación entre las obervaciones diarias y el número de rezagos a evaluar (hasta 30 rezagos), dada la estructura del mercado bursátil inmersa en el comportamiento diario, es de esperarse una alta correlación entre la serie y sus rezagos, de tal manera que una alta correlación positiva puede denotarse incluso hasta el límite del conjunto de gráficos construidos, pues la tendencia de correlación lineal entre las observaciones puede identificarse claramente en todas las instancias, incluso a pesar de que sobre los últimos números de rezagos la tendencia lineal parece englobarse, mostrando signos de grados de aleatoriedad, esto se tendrá en cuenta al graficar la aproximación por rezagos de la serie más adelante. # Subset data for the date range spx_segment &lt;- spx_Close_ts[&quot;2020-01-01/2024-10-11&quot;] lag.plot(spx_segment, lags = 30, do.lines = FALSE) 2.3 Estacionariedad y tratamiento Un análisis propicio de esta serie de tiempo también implica cónsiderar los posibles efectos estacionales que pueden subyacer en el comportamiento del índice. Así, se provee una aproximación desestacionalizada de la serie a través del método de diferenciación estacional. La aplicación de diferenciación estacional sustrae el valor del año anterior en la misma fecha para cada observación, de la siguiente manera: \\[ Y^* = Y_t - Y_u \\] Donde \\(Y^*\\) es la serie de tiempo diferenciada estacionalmente, \\(Y_t\\) es el valor del datapoint, y \\(Y_u\\) es el valor correspondiente a la misma fecha del datapoint en el año inmediatamente anterior. Esta es una técnica ideal para el tratamiento de efectos estacionales en series de tiempo diarias, pues permite aislar el comportamiento desestacionalizado del índice de manera simple y sin el requerimiento de una alta cantidad de observaciones que puedan denotar periodos estadísticamente significativos (como es requerido en el caso de ejercicios de desestacionalización de series anuales). A continuación, se presenta el gráfico de comparación entre la serie diferenciada estacionalmente (color azul) y el gráfico del tramo de la serie original en el mismo intervalo de tiempo (color negro), de tal forma que es posible notar la diferencia en sus patrones de crecimiento. Claramente, la serie sin desestacionalizar denota un patrón de crecimiento más estable, en contraposición a los altibajos que presenta la serie desestacionalizada, de tal forma que es posible atribuir este crecimiento sostenido a los efectos estacionales. # Seasonal differencing seasonal_diff &lt;- diff(spx_segment, lag = 365) # Check the result #plot(seasonal_diff, main = &quot;S&amp;P 500 - Seasonally Differenced Time Series&quot;) spx_segment2 &lt;- spx_Close_ts[&quot;2023-01-01/2024-10-11&quot;] #plot(spx_segment2, main = &quot; &quot;, ylab=&quot;S&amp;P500 Index since 2021-01-01&quot;, col = &quot;deepskyblue&quot;, xlab= &quot;Date&quot;) #title(main=&quot;S&amp;P500 Index (Starting at January First of 2021)&quot;) # Plot the original time series and the moving averages plot(spx_segment2, main = &quot;S&amp;P 500 Seasonally-Treated Series and Raw Series&quot;, col = &quot;black&quot;, lwd = 1, xlab = &quot;Date&quot;, ylab = &quot;Price&quot;) lines(seasonal_diff, col = &quot;blue&quot;, lwd = 2) # Adjust the legend position to &quot;topleft&quot; and include both MAs in the legend legend(&quot;topleft&quot;, legend = c(&quot;Original&quot;, &quot;Seasonal Diff&quot;), col = c(&quot;black&quot;, &quot;blue&quot;), lwd = 2, inset = 1, # Adjust inset if needed to bring the legend inside the plot area cex = 5) # Adjust `cex` to change the size of the legend text Ahora, teniendo en cuenta la serie desestacionalizada, es posible presentar sus aproximaciones por medio de media movil (MA) y rezagos. 2.4 Aproximación por MA Inicialmente, se presenta la sucesión de gráficos en los cuales se compara la evoluación de la serie desestacionalizada (en color negro) con sus aproximaciones por medio del cálculo de medias móviles a 10 días (color azul), y a 20 días (color rojo). Nótese cómo, a mayor cantidad de días considerados para la media móvil, se suaviza en mayor medida en comportamiento del índice. #install.packages(&quot;zoo&quot;) #install.packages(&quot;TTR&quot;) library(zoo) library(TTR) # Calculate a 10-day simple moving average spx_ma_10 &lt;- rollmean(seasonal_diff, k = 10, fill = NA) # Alternatively, using TTR for a 20-day moving average spx_ma_20 &lt;- SMA(seasonal_diff, n = 20) # Plot the original time series and the moving averages plot(seasonal_diff, main = &quot;S&amp;P 500 Close Prices with Moving Averages&quot;, col = &quot;black&quot;, lwd = 1, xlab = &quot;Date&quot;, ylab = &quot;Price&quot;) lines(spx_ma_10, col = &quot;blue&quot;, lwd = 2) lines(spx_ma_20, col = &quot;red&quot;, lwd = 2) # Adjust the legend position to &quot;topleft&quot; and include both MAs in the legend legend(&quot;topleft&quot;, legend = c(&quot;Original&quot;, &quot;10-day MA&quot;, &quot;20-day MA&quot;), col = c(&quot;black&quot;, &quot;blue&quot;, &quot;red&quot;), lwd = 2, inset = 1, # Adjust inset if needed to bring the legend inside the plot area cex = 5) # Adjust `cex` to change the size of the legend text 2.5 Aproximación por rezagos Finalmente, se presenta en el mismo gráfico la serie desestacionalizada (color negro), en conjunto con su aproximación en función de 10 rezagos. Esta cantidad de rezagos se escoge en función de la observación del lag plot, pues, desde la observación informal, puede notarse que es hasta el rezago 10 donde se puede apreciar una relación lineal y directamente proporcional con mayor “pureza”, cabe recalcar que este criterio de selección carece de una verificación estadística con rigor, la cual puede alcanzarse al aplicar un modelo autoregresivo sobre la serie de tiempo, sin embargo, este ejercicio limita su alcance a la observación de las tendencias preliminares de manera gráfica, sin profundizar en modelos de ajuste y predicción. # Create a 1-day lag for the subset spx_lag_1_segment &lt;- lag(seasonal_diff, n=10) # Plot the original segment and the lagged values plot(seasonal_diff, main = &quot;S&amp;P 500 Segment and 10-Day Lag&quot;, col = &quot;black&quot;, lwd = 1) lines(spx_lag_1_segment, col = &quot;blue&quot;, lwd = 2) legend(&quot;topright&quot;, legend = c(&quot;Original&quot;, &quot;7-day Lag&quot;), col = c(&quot;black&quot;, &quot;blue&quot;), lwd = 1) "],["análisis-avanzado-de-series-de-tiempo.html", " 3 Análisis Avanzado de Series de Tiempo 3.1 Descomposición de la Serie de Tiempo 3.2 Estacionariedad 3.3 Diferenciación de la Serie 3.4 Transformación para Control de Tendencia y Variabilidad 3.5 Conclusiones", " 3 Análisis Avanzado de Series de Tiempo 3.1 Descomposición de la Serie de Tiempo Para el análisis de esta serie de tiempo, se realiza una descomposición aditiva con el fin de identificar y separar los componentes fundamentales: tendencia, estacionalidad y residuo. Esta descomposición es fundamental para detectar patrones subyacentes y facilita la toma de decisiones sobre la necesidad de aplicar técnicas adicionales, como la diferenciación o transformaciones, para manejar la variabilidad y controlar posibles sesgos en la serie temporal. # Cargar librerías necesarias library(xts) library(forecast) # Ajusta el argumento frequency spx_ts &lt;- ts(spx_segment, frequency = 365) # Descomposición de la serie decomposed_spx &lt;- decompose(spx_ts) # Graficar los componentes plot(decomposed_spx) La serie temporal del S&amp;P 500 fue descompuesta en sus componentes principales para identificar y analizar su estructura subyacente. A continuación, se describen cada uno de los componentes y la información que aporta al análisis: Observed (Observado): Este componente representa los valores reales de la serie temporal, incluyendo todas las variaciones de tendencia, estacionariedad y ruido. En esta serie observada, se destaca un comportamiento al alza, especialmente hacia el final del período analizado, lo cual es consistente con la tendencia del S&amp;P 500 en el tiempo. Trend (Tendencia): El componente de tendencia refleja el cambio general de nivel en la serie a lo largo del tiempo. En este caso, la tendencia muestra un crecimiento estable, con una ligera aceleración hacia el final del período. Este componente es clave para identificar cambios de nivel en el mercado y observar patrones de crecimiento o decrecimiento en el índice. Seasonal (Estacionariedad): La estacionariedad captura patrones repetitivos que ocurren en intervalos específicos. En el caso del S&amp;P 500, se observan fluctuaciones periódicas, lo que indica la presencia de Estacionariedad en el comportamiento de la serie. Este componente es relevante para comprender ciclos repetitivos que pueden estar asociados a factores estacionales o eventos recurrentes en el mercado. Random (Ruido): El componente de ruido representa la variabilidad que no puede ser explicada por la tendencia ni por la estacionariedad. En esta serie, se observa una alta variabilidad en el componente de ruido, lo cual sugiere la influencia de factores externos y cambios impredecibles que afectan el mercado. Este componente es especialmente importante para entender la cantidad de incertidumbre o volatilidad en el índice. 3.2 Estacionariedad Para evaluar la estacionariedad de la serie temporal del S&amp;P 500, se realizó la prueba de Dickey-Fuller Aumentado (ADF). Esta prueba estadística es utilizada comúnmente en series temporales para determinar si una serie es estacionaria, es decir, si sus propiedades estadísticas, como la media y la varianza, son constantes en el tiempo. El procedimiento es el siguiente: Aplicación del Test: El test de Dickey-Fuller evalúa la hipótesis nula de que la serie no es estacionaria. Si el p-valor de la prueba es menor que 0.05, se rechaza la hipótesis nula, lo que indica que la serie es estacionaria. Interpretación de Resultados: Si el p-valor es menor que 0.05, se concluye que la serie es estacionaria, y no sería necesario aplicar transformaciones adicionales para estabilizarla. Si el p-valor es mayor que 0.05, se indica que la serie no es estacionaria, por lo que podría ser necesario aplicar una diferenciación para eliminar la tendencia y estabilizar la media de la serie. La aplicación de esta prueba permite tomar decisiones informadas sobre el tratamiento de la serie temporal y la necesidad de realizar ajustes adicionales para mejorar la precisión de los análisis y modelos de pronóstico. # Cargar la librería necesaria library(tseries) # Realizar el test de Dickey-Fuller aumentado (ADF) adf_test &lt;- adf.test(spx_ts, alternative = &quot;stationary&quot;) # Imprimir los resultados print(adf_test) ## ## Augmented Dickey-Fuller Test ## ## data: spx_ts ## Dickey-Fuller = -1.7067, Lag order = 10, p-value = 0.7025 ## alternative hypothesis: stationary El resultado de la prueba de Dickey-Fuller Aumentado (ADF) muestra un p-valor de 0.7025, el cual es significativamente mayor que el umbral de 0.05. Esto implica que no se rechaza la hipótesis nula, lo que indica que la serie temporal del S&amp;P 500 no es estacionaria. Dado que la serie no es estacionaria, será necesario aplicar una diferenciación para estabilizar la media y remover la tendencia presente en la serie. Esta diferenciación ayudará a que las propiedades estadísticas de la serie se mantengan constantes en el tiempo, lo cual es esencial para construir modelos de pronóstico precisos y evitar resultados sesgados debido a la presencia de una tendencia. 3.3 Diferenciación de la Serie Para estabilizar la media y eliminar la tendencia de la serie temporal del S&amp;P 500, se aplicó una diferenciación de primer orden. # Aplicar una diferenciación de primer orden diff_spx &lt;- diff(spx_ts) # Graficar la serie diferenciada para verificar los resultados plot(diff_spx, main=&quot;Serie Temporal Diferenciada del S&amp;P 500&quot;) La gráfica resultante muestra que, tras esta diferenciación, la serie oscila alrededor de un valor cercano a cero, lo cual indica que la tendencia fue efectivamente removida. Esto sugiere que la serie es ahora más adecuada para análisis posteriores, ya que presenta una media estable y se ha eliminado la tendencia a largo plazo que estaba presente en la serie original. 3.4 Transformación para Control de Tendencia y Variabilidad Antes de proceder con algún tipo de transformación se realiza nuevamente la validación de estacionariedad luego de diferenciación de la serie. # Realizar el test de Dickey-Fuller en la serie diferenciada adf_test_diff &lt;- adf.test(diff_spx, alternative = &quot;stationary&quot;) # Imprimir los resultados print(adf_test_diff) ## ## Augmented Dickey-Fuller Test ## ## data: diff_spx ## Dickey-Fuller = -10.04, Lag order = 10, p-value = 0.01 ## alternative hypothesis: stationary El resultado del test de Dickey-Fuller en la serie diferenciada muestra un p-valor de 0.01, el cual es menor que el umbral de 0.05. Esto implica que se rechaza la hipótesis nula y, por lo tanto, la serie diferenciada es estacionaria. Dado que la serie temporal del S&amp;P 500, después de la diferenciación de primer orden, muestra estacionariedad con una media constante y no presenta una variabilidad creciente a lo largo del tiempo, se concluye que no es necesario aplicar transformaciones adicionales para estabilizar la varianza. La diferenciación realizada fue suficiente para remover la tendencia y estabilizar la media, lo cual asegura que la serie se encuentra en condiciones adecuadas para ser analizada sin introducir distorsiones adicionales en los datos. Las transformaciones, como logaritmos o raíces cuadradas, suelen emplearse cuando existe una varianza creciente o fluctuaciones amplias, características que no se observan en esta serie diferenciada. 3.5 Conclusiones Descomposición de la Serie: La descomposición de la serie temporal del S&amp;P 500 permitió identificar los componentes de tendencia, Estacionariedad y ruido. Esto ayudó a separar los patrones subyacentes en la serie y facilitó el análisis detallado de cada uno. Verificación de Estacionariedad: La prueba de Dickey-Fuller aplicada a la serie original confirmó que la serie no era estacionaria, lo cual hizo necesaria la aplicación de una diferenciación de primer orden para estabilizar la media y remover la tendencia. Aplicación de Diferenciación: Tras aplicar la diferenciación de primer orden, la serie temporal mostró un comportamiento estacionario, lo cual fue confirmado mediante una segunda prueba de Dickey-Fuller. La serie diferenciada no presenta tendencia y oscila alrededor de una media constante. No Necesidad de Transformaciones Adicionales: Debido a que la serie diferenciada no muestra problemas de varianza creciente, se concluye que no es necesario aplicar transformaciones adicionales para estabilizar la variabilidad. La serie está en condiciones adecuadas para análisis posteriores o para su inclusión en modelos de pronóstico. "],["introducción-a-modelos-de-pronóstico-modelos-de-suavizamiento-exponencial..html", " 4 Introducción a modelos de pronóstico: Modelos de Suavizamiento Exponencial. 4.1 Modelo Holt-Winters aditivo 4.2 Modelo Holt-Winters Multiplicativo 4.3 Suavizamiento exponencial simple", " 4 Introducción a modelos de pronóstico: Modelos de Suavizamiento Exponencial. El estudio de los modelos de pronóstico en análisis de series de tiempo puede abordarse inicialmente desde la perspectiva de los modelos de Suavizamiento Exponencial, los cuales proveen una estructura intuitiva en el sentido de los componentes de la serie de tiempo analizada, al asumir como supuesto fundamental que los valores futuros de la serie de tiempo dependen de sus valores pasados, definiendo la contribución de estos al emplear ponderaciones exponencialmente decrecientes en los rezagos. Además, en su sofisticación en el modelo Holt-Winters, los modelos de Suavizamiento Exponencial también incluyen la influencia de los componentes de tendencia y estacionalidad. En esta sección, haremos uso de las propiedades del análisis de Suavizamiento Exponencial al aplicar el Modelo Holt-Winters en sus versiones aditiva y multiplicativa a nuestra serie de tiempo S&amp;P 500. Además, dada la frecuencia diaria de los datos, también evaluaremos la bondad de ajuste del modelo de Suavizamiento Exponencial Simple, el cual sólo considera la influencia ponderada del Nivel (valores pasados), y excluye la posible influencia de los efectos de Tendencia y Estacionalidad. 4.1 Modelo Holt-Winters aditivo El modelo Holt-Winters aditivo modela la serie de tiempo en cuestión considerando la relación de Suavizamiento Exponencial y los efectos de Tendencia y Estacionalidad de manera aditiva, generando un esquema de modelación de bastante precisión en el ajuste con respecto a los valores observados de la serie. Esto puede evidenciarse en el siguiente gráfico, al denotar la similitud entre los valores reales de la serie (negro) y los valores ajustados provistos por el modelo (rojo). # Additive Holt-Winters model hw_additive &lt;- HoltWinters(spx_ts, seasonal = &quot;additive&quot;) # View the summary of the model summary(hw_additive) ## Length Class Mode ## fitted 3352 mts numeric ## x 1203 ts numeric ## alpha 1 -none- numeric ## beta 1 -none- numeric ## gamma 1 -none- numeric ## coefficients 367 -none- numeric ## seasonal 1 -none- character ## SSE 1 -none- numeric ## call 3 -none- call # Access parameter values alpha &lt;- hw_additive$alpha beta &lt;- hw_additive$beta gamma &lt;- hw_additive$gamma # Print the parameter values cat(&quot;Parameter values for Additive Holt-Winters Model:\\n&quot;) ## Parameter values for Additive Holt-Winters Model: cat(&quot;Alpha (Level):&quot;, alpha, &quot;\\n&quot;) ## Alpha (Level): 0.9345617 cat(&quot;Beta (Trend):&quot;, beta, &quot;\\n&quot;) ## Beta (Trend): 0 cat(&quot;Gamma (Seasonal):&quot;, gamma, &quot;\\n&quot;) ## Gamma (Seasonal): 1 # Plot the fitted values plot(hw_additive, main = &quot;Additive Holt-Winters Forecast&quot;) Además, nótese el comportamiento de los parámetros por componentes de la serie, existiendo una alta contribución del componente de nivel (0,93), una contribución absoluta del componente estacional (1), y una contribución nula del componente de tendencia (0). Este resultado es esperado debido a la naturaleza de actualización diaria y la tendencia relativamente estática del índice S&amp;P 500, y puede apreciarse a profundidad en el gráfico de descomposición del modelo. # Plot the fitted values plot(fitted(hw_additive), main = &quot;Additive Holt-Winters Forecast&quot;) Así, puede observarse que el comportamiento de la estimación del modelo posee una forma muy similar a la del componente de nivel, que la forma del componente de estacionalidad denota un comportamiento cíclico marcado en la serie modelada, y que, en promedio, la tendencia no varía. A continuación, se presenta el gráfico de predicción a 30 días futuros de la serie de tiempo desde el modelo Holt-Winters aditivo. library(forecast) # Forecast using the additive model forecast_additive &lt;- forecast(hw_additive, h = 30) # Forecast for next 12 periods plot(forecast_additive, main = &quot;Additive Holt-Winters Forecast&quot;) Además, la eficiencia en las predicciones del modelo se contrasta en función de la partición 80/20 de la serie en respectivos conjuntos de training y test. De tal forma que un ejercicio de validación cruzada del modelo ajustado en el conjunto de training en contraste con los datos del conjunto de test arroja las métricas de ajuste del modelo, presentadas a continuación. # Define the training size (e.g., 80% of the data) train_size &lt;- floor(0.8 * length(spx_ts)) # Create training and test sets train_set &lt;- window(spx_ts, end = c(time(spx_ts)[train_size])) test_set &lt;- window(spx_ts, start = c(time(spx_ts)[train_size + 1])) # Fit the additive Holt-Winters model on the training set hw_additive_train &lt;- HoltWinters(train_set, seasonal = &quot;additive&quot;) # Generate forecast for the test set period hw_forecast1 &lt;- forecast(hw_additive_train, h = length(test_set)) # Extract the forecasted values predicted_values1 &lt;- hw_forecast1$mean # Calculate forecast errors errors &lt;- test_set - predicted_values1 # Mean Absolute Error (MAE) MAE &lt;- mean(abs(errors)) # Mean Absolute Percentage Error (MAPE) MAPE &lt;- mean(abs(errors / test_set)) * 100 # Root Mean Squared Error (RMSE) RMSE &lt;- sqrt(mean(errors^2)) # Display metrics cat(&quot;Adjustment Metrics for Additive Holt-Winters Model on Test Set:\\n&quot;) ## Adjustment Metrics for Additive Holt-Winters Model on Test Set: cat(&quot;MAE: &quot;, MAE, &quot;\\n&quot;) ## MAE: 661.1403 cat(&quot;MAPE: &quot;, MAPE, &quot;%\\n&quot;) ## MAPE: 12.66671 % cat(&quot;RMSE: &quot;, RMSE, &quot;\\n&quot;) ## RMSE: 686.4102 En general, las métricas de interés de Error Porcentual Absoluto Medio (MAPE) y Error Cuadrático Medio (RMSE) muestran un error relativo de alrededor del 12%, y un error cuadrático de alrededor de 686, respectivamente. Este resultado indica un ajuste bondadoso en términos relativos y absolutos de las predicciones del modelo aditivo con respecto a los valores centrales provistos por el conjunto de test. 4.2 Modelo Holt-Winters Multiplicativo Ahora, es posible aplicar la misma rutina de modelación empleando el modelo Holt-Winters multiplicativo, el cual considera la contribución de los componentes de Nivel, Tendencia y Estacionalidad de forma multiplicativa. Este modelo denota resultados similares, con la difirencia respecto del caso aditivo de una menor contribución del componente de Nivel al modelo (0,91). # Multiplicative Holt-Winters model hw_Multiplicative &lt;- HoltWinters(spx_ts, seasonal = &quot;multiplicative&quot;) # View the summary of the model summary(hw_Multiplicative) ## Length Class Mode ## fitted 3352 mts numeric ## x 1203 ts numeric ## alpha 1 -none- numeric ## beta 1 -none- numeric ## gamma 1 -none- numeric ## coefficients 367 -none- numeric ## seasonal 1 -none- character ## SSE 1 -none- numeric ## call 3 -none- call # Access parameter values alpha &lt;- hw_Multiplicative$alpha beta &lt;- hw_Multiplicative$beta gamma &lt;- hw_Multiplicative$gamma # Print the parameter values cat(&quot;Parameter values for Multiplicative Holt-Winters Model:\\n&quot;) ## Parameter values for Multiplicative Holt-Winters Model: cat(&quot;Alpha (Level):&quot;, alpha, &quot;\\n&quot;) ## Alpha (Level): 0.9193546 cat(&quot;Beta (Trend):&quot;, beta, &quot;\\n&quot;) ## Beta (Trend): 0 cat(&quot;Gamma (Seasonal):&quot;, gamma, &quot;\\n&quot;) ## Gamma (Seasonal): 1 # Plot the fitted values plot(hw_Multiplicative, main = &quot;Multiplicative Holt-Winters Forecast&quot;) También es posible observar la fuerte influencia del componente de nivel en el comportamiento de los valores ajustados, la persistencia del patrón de estacionalidad, y la nulidad en la influencia del componente de tendencia en el gráfico de descomposición. # Plot the fitted values plot(fitted(hw_Multiplicative), main = &quot;Multiplicative Holt-Winters Forecast&quot;) Al graficar la predicción a 30 días futuros del modelo, se observa un intervalo de predicción bastante similar al del caso aditivo. library(forecast) # Forecast using the Multiplicative model forecast_Multiplicative &lt;- forecast(hw_Multiplicative, h = 30) # Forecast for next 12 periods plot(forecast_Multiplicative, main = &quot;Multiplicative Holt-Winters Forecast&quot;) Esto se refuerza con la similitud en las métricas de ajuste como producto del ejercicio de validación cruzada en el conjunto de Test, existiendo un muy ligero desmejoramiento tanto en MAPE como en RMSE con respecto al caso aditivo. # Fit the multiplicative Holt-Winters model on the training set hw_multiplicative_train &lt;- HoltWinters(train_set, seasonal = &quot;multiplicative&quot;) # Generate forecast for the test set period hw_forecast2 &lt;- forecast(hw_multiplicative_train, h = length(test_set)) # Extract the forecasted values predicted_values2 &lt;- hw_forecast2$mean # Calculate forecast errors errors &lt;- test_set - predicted_values2 # Mean Absolute Error (MAE) MAE &lt;- mean(abs(errors)) # Mean Absolute Percentage Error (MAPE) MAPE &lt;- mean(abs(errors / test_set)) * 100 # Root Mean Squared Error (RMSE) RMSE &lt;- sqrt(mean(errors^2)) # Display metrics cat(&quot;Adjustment Metrics for Multiplicative Holt-Winters Model on Test Set:\\n&quot;) ## Adjustment Metrics for Multiplicative Holt-Winters Model on Test Set: cat(&quot;MAE: &quot;, MAE, &quot;\\n&quot;) ## MAE: 667.4153 cat(&quot;MAPE: &quot;, MAPE, &quot;%\\n&quot;) ## MAPE: 12.78964 % cat(&quot;RMSE: &quot;, RMSE, &quot;\\n&quot;) ## RMSE: 692.9786 4.3 Suavizamiento exponencial simple Finalmente, dada la naturaleza diaria de la serie de tiempo, es necesario explorar la aplicación de un modelo de Suavizamiento Exponencial Simple (SES) sobre el dataset. Este modelo no es más que una reducción del modelo general Holt-Winters, nulificando los componentes de Tendencia y Estacionalidad, y modelando la serie como estrictamente dependiente del componente de Nivel. # SES model hw_SES &lt;- HoltWinters(spx_ts, beta = FALSE, gamma = FALSE) # View the summary of the model summary(hw_SES) ## Length Class Mode ## fitted 2404 mts numeric ## x 1203 ts numeric ## alpha 1 -none- numeric ## beta 1 -none- logical ## gamma 1 -none- logical ## coefficients 1 -none- numeric ## seasonal 1 -none- character ## SSE 1 -none- numeric ## call 4 -none- call # Access parameter values alpha &lt;- hw_SES$alpha beta &lt;- hw_SES$beta gamma &lt;- hw_SES$gamma # Print the parameter values cat(&quot;Parameter values for SES Model:\\n&quot;) ## Parameter values for SES Model: cat(&quot;Alpha (Level):&quot;, alpha, &quot;\\n&quot;) ## Alpha (Level): 0.9116522 cat(&quot;Beta (Trend):&quot;, beta, &quot;\\n&quot;) ## Beta (Trend): FALSE cat(&quot;Gamma (Seasonal):&quot;, gamma, &quot;\\n&quot;) ## Gamma (Seasonal): FALSE # Plot the fitted values plot(hw_SES, main = &quot;SES Model Forecast&quot;) Nótese, que gráficamente, se percibe un mejor ajuste del modelo con respecto a las observaciones que en los casos de Holt-Winters aditivo y multiplicativo. Además, el parámetro de ponderación de nivel es casi igual al del caso multiplicativo. El siguiente gráfico de descomposición denota la restricción de la estimación del modelo a ser exclusivamente dependiente del componente de nivel. # Plot the fitted values plot(fitted(hw_SES), main = &quot;SES Model Forecast&quot;) Nótese cómo, al ejecutar la predicción a 30 días futuros bajo el modelo SES, se obtiene una progresión horizontal de los valores predichos en función del último valor ajustado, siendo éste el valor central de un intervalo de predicción simétrico. Este resultado se da debido a la desaparición de la influencia de la tendencia y la estacionalidad en la predicción, este condicionamiento reduce en gran medida la eficiencia de este modelo, por lo cual también suele llamársele “predicción ingenua”. library(forecast) # Forecast using the SES model forecast_SES &lt;- forecast(hw_SES, h = 30) # Forecast for next 12 periods plot(forecast_SES, main = &quot;SES model Forecast&quot;) Este resultado puede observarse puntualmente en el decrecimiento significativo de la eficiencia del modelo a partir de las métricas obtenidas en la validación cruzada: MAPE 19%, y RMSE 1081. # Fit the SES model on the training set hw_SES_train &lt;- HoltWinters(train_set, beta = FALSE, gamma = FALSE) # Generate forecast for the test set period SES_forecast &lt;- forecast(hw_SES_train, h = length(test_set)) # Extract the forecasted values predicted_values3 &lt;- SES_forecast$mean # Calculate forecast errors errors &lt;- test_set - predicted_values3 # Mean Absolute Error (MAE) MAE &lt;- mean(abs(errors)) # Mean Absolute Percentage Error (MAPE) MAPE &lt;- mean(abs(errors / test_set)) * 100 # Root Mean Squared Error (RMSE) RMSE &lt;- sqrt(mean(errors^2)) # Display metrics cat(&quot;Adjustment Metrics for SES Model on Test Set:\\n&quot;) ## Adjustment Metrics for SES Model on Test Set: cat(&quot;MAE: &quot;, MAE, &quot;\\n&quot;) ## MAE: 1008.33 cat(&quot;MAPE: &quot;, MAPE, &quot;%\\n&quot;) ## MAPE: 19.09173 % cat(&quot;RMSE: &quot;, RMSE, &quot;\\n&quot;) ## RMSE: 1081.097 En este sentido, dado el análisis realizado y las prepiedades exploradas en el marco del modelo Holt-Winters, resulta indispensable el considerar la influencia de los componentes de Tendencia y Estacionalidad en la serie de tiempo, de tal forma que, de tener que escoger entre las 3 opciones de modelación a disposición para la toma de decisiones en el mercado, el emplear predicciones desde el modelo Holt-Winters aditivo se muestra como la decisión correcta. "],["variables-en-el-tiempo-el-ajuste-a-un-modelo-lineal-y-estacionario..html", " 5 Variables en el tiempo, el ajuste a un modelo lineal y estacionario.", " 5 Variables en el tiempo, el ajuste a un modelo lineal y estacionario. "],["análisis-de-series-de-tiempo-con-facebook-prophet..html", " 6 Análisis de Series de Tiempo con Facebook Prophet. 6.1 Introducción. 6.2 Preparación de los Datos. 6.3 Aplicación del Modelo Prophet. 6.4 Justificación. 6.5 Conclusiones.", " 6 Análisis de Series de Tiempo con Facebook Prophet. 6.1 Introducción. En este capítulo se aplica el modelo Facebook Prophet para analizar una serie de tiempo basada en datos históricos del índice S&amp;P 500. El objetivo principal es explorar tendencias, estacionalidades y realizar predicciones futuras, complementando los modelos trabajados previamente. Además, se justifica la viabilidad de tratar la serie como una regresión, conectando los hallazgos con enfoques lineales y estacionarios ya planteados. 6.2 Preparación de los Datos. Para llevar a cabo el análisis con Prophet, fue necesario preparar previamente el dataset spx_data, que contiene información histórica del índice S&amp;P 500, incluyendo la fecha (Date), el precio de cierre (Close/Last), apertura (Open), máximos (High) y mínimos (Low). Prophet requiere que las columnas de fecha y la variable objetivo tengan nombres específicos para procesar los datos correctamente. Primero, la columna Date se renombró como ds (date stamp) y la columna Close/Last se renombró como y (valor a predecir). Además, los datos fueron ordenados cronológicamente en orden ascendente para garantizar la consistencia temporal del modelo. Este preprocesamiento fue esencial para alinear el formato del dataset con los requisitos de Prophet, asegurando que las fechas fueran interpretadas correctamente y los valores de cierre sirvieran como base para las predicciones. # Prepare the dataset for Prophet spx_data_prepared &lt;- spx_data %&gt;% rename(ds = Date, y = `Close/Last`) %&gt;% arrange(ds) # Check the prepared dataset head(spx_data_prepared) ## # A tibble: 6 × 5 ## ds y Open High Low ## &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2014-11-17 2041. 2038. 2043. 2034. ## 2 2014-11-18 2052. 2041. 2056. 2041. ## 3 2014-11-19 2049. 2051. 2052. 2040. ## 4 2014-11-20 2053. 2046. 2054. 2040. ## 5 2014-11-21 2064. 2057. 2071. 2057. ## 6 2014-11-24 2069. 2065. 2070. 2065. 6.3 Aplicación del Modelo Prophet. Con los datos preparados, se aplicó el modelo Prophet para analizar la serie temporal del índice S&amp;P 500. Utilizando las columnas ds (fechas) y y (precio de cierre), el modelo fue ajustado para capturar las tendencias y estacionalidades presentes en los datos históricos. # Load Prophet library library(prophet) # Fit the Prophet model model &lt;- prophet(spx_data_prepared) # Create future dates for predictions future &lt;- make_future_dataframe(model, periods = 365) # Generate predictions forecast &lt;- predict(model, future) 6.3.1 Gráfico de Predicciones: # Plot the forecast plot(model, forecast) El gráfico combina los datos históricos del índice S&amp;P 500 con las predicciones generadas por el modelo Prophet. La línea negra representa los valores reales observados desde 2015, mostrando un crecimiento sostenido con fluctuaciones atribuibles a eventos del mercado. La línea azul, que corresponde al pronóstico del modelo, sugiere que el índice mantendrá una tendencia ascendente en el futuro. El área sombreada en azul claro, que representa los intervalos de confianza, es estrecha en el corto plazo, indicando alta precisión en las predicciones inmediatas, y se amplía en el largo plazo, reflejando una mayor incertidumbre debido a factores impredecibles. 6.3.2 Gráfico de Componentes: # Plot forecast components prophet_plot_components(model, forecast) El gráfico descompone el comportamiento del índice S&amp;P 500 en tres componentes principales: tendencia, estacionalidad semanal y estacionalidad anual. La tendencia refleja un crecimiento positivo sostenido a largo plazo, alineado con el desempeño histórico del mercado. La estacionalidad semanal muestra variaciones asociadas a los días de la semana, destacando una disminución los fines de semana debido a la inactividad del mercado. Por su parte, la estacionalidad anual identifica patrones cíclicos recurrentes a lo largo del año, posiblemente influenciados por ciclos económicos y eventos estacionales. Estos componentes permiten comprender los factores que afectan el comportamiento del índice y aportan información clave para las predicciones. 6.4 Justificación. El análisis realizado con Prophet demuestra que la serie de tiempo del índice S&amp;P 500 puede modelarse bajo un enfoque de regresión. Esto se debe a que el modelo descompone la serie en componentes fundamentales, como tendencia, estacionalidad semanal y anual, permitiendo capturar las relaciones temporales inherentes en los datos. En este caso, el tiempo actúa como la variable independiente, mientras que el valor de cierre (Close/Last) es la variable dependiente. Prophet utiliza un enfoque aditivo, lo que significa que combina las tendencias y patrones estacionales en una fórmula de regresión temporal. Este método permite no solo predecir valores futuros, sino también identificar cómo las fluctuaciones diarias, semanales y anuales influyen en el comportamiento del índice. Por lo tanto, la serie puede justificarse como un problema de regresión, donde cada componente aporta información crucial para el modelo. Un ejemplo práctico de esta relación se observa en la tendencia a largo plazo, que refleja el crecimiento sostenido del índice a lo largo de los años, mientras que las estacionalidades semanal y anual introducen variaciones más pequeñas pero consistentes, como los cambios en días de operación o ciclos económicos. 6.5 Conclusiones. El modelo Prophet demostró ser una herramienta eficaz para analizar y predecir el comportamiento del índice S&amp;P 500. La descomposición de la serie en componentes de tendencia, estacionalidad semanal y estacionalidad anual permitió no solo realizar predicciones precisas, sino también interpretar los patrones subyacentes en los datos históricos. El enfoque de regresión aplicado en Prophet proporciona una base sólida para justificar el uso de esta técnica en el análisis de series temporales, al tratar el tiempo como predictor y los valores históricos como resultados. Esto refuerza la idea de que los datos financieros, como el índice S&amp;P 500, pueden modelarse y explicarse utilizando metodologías de regresión dentro de un contexto temporal. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
